<?php

/**
 * BaseWfWorkflow
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $wf_name
 * @property string $wf_desc
 * @property string $start_task_id
 * @property boolean $is_valid
 * @property string $wf_errors
 * @property date $start_date
 * @property date $end_date
 * @property timestamp $created_date
 * @property integer $created_user
 * @property timestamp $revised_date
 * @property integer $revised_user
 * @property Doctrine_Collection $WfPlaces
 * @property Doctrine_Collection $WfTransitions
 * @property Doctrine_Collection $WfArcs
 * @property Doctrine_Collection $WfCases
 * @property Doctrine_Collection $WfTokens
 * @property Doctrine_Collection $WfWorkitems
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseWfWorkflow extends izDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('wf_workflow');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('wf_name', 'string', 255, array(
             'type' => 'string',
             'default' => '',
             'length' => '255',
             ));
        $this->hasColumn('wf_desc', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('start_task_id', 'string', 255, array(
             'type' => 'string',
             'default' => '',
             'length' => '255',
             ));
        $this->hasColumn('is_valid', 'boolean', 1, array(
             'type' => 'boolean',
             'default' => false,
             'length' => '1',
             ));
        $this->hasColumn('wf_errors', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('start_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('end_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('created_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             'default' => '2000-01-01 00:00:00',
             ));
        $this->hasColumn('created_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('revised_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('revised_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('WfPlace as WfPlaces', array(
             'local' => 'id',
             'foreign' => 'wf_id'));

        $this->hasMany('WfTransition as WfTransitions', array(
             'local' => 'id',
             'foreign' => 'wf_id'));

        $this->hasMany('WfArc as WfArcs', array(
             'local' => 'id',
             'foreign' => 'wf_id'));

        $this->hasMany('WfCase as WfCases', array(
             'local' => 'id',
             'foreign' => 'wf_id'));

        $this->hasMany('WfToken as WfTokens', array(
             'local' => 'id',
             'foreign' => 'wf_id'));

        $this->hasMany('WfWorkitem as WfWorkitems', array(
             'local' => 'id',
             'foreign' => 'wf_id'));
    }
}