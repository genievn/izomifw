<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntityBaseMenuItemProxy extends \Entity\Base\MenuItem implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function __set($var, $val)
    {
        $this->__load();
        return parent::__set($var, $val);
    }

    public function __get($var)
    {
        $this->__load();
        return parent::__get($var);
    }

    public function setMenu($menu)
    {
        $this->__load();
        return parent::setMenu($menu);
    }

    public function setParent($parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function removeParent()
    {
        $this->__load();
        return parent::removeParent();
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function setTarget($target)
    {
        $this->__load();
        return parent::setTarget($target);
    }

    public function getTarget()
    {
        $this->__load();
        return parent::getTarget();
    }

    public function setLink($link)
    {
        $this->__load();
        return parent::setLink($link);
    }

    public function getModule()
    {
        $this->__load();
        return parent::getModule();
    }

    public function setModule($module)
    {
        $this->__load();
        return parent::setModule($module);
    }

    public function getMethod()
    {
        $this->__load();
        return parent::getMethod();
    }

    public function setMehtod($method)
    {
        $this->__load();
        return parent::setMehtod($method);
    }

    public function getParams()
    {
        $this->__load();
        return parent::getParams();
    }

    public function setParams($params)
    {
        $this->__load();
        return parent::setParams($params);
    }

    public function isLeaf()
    {
        $this->__load();
        return parent::isLeaf();
    }

    public function setAction($action)
    {
        $this->__load();
        return parent::setAction($action);
    }

    public function getAction()
    {
        $this->__load();
        return parent::getAction();
    }

    public function getMenu()
    {
        $this->__load();
        return parent::getMenu();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'slug', 'link', 'module', 'method', 'params', 'target', 'lft', 'lvl', 'rgt', 'root', 'num_views', 'status', 'parent', 'children', 'action', 'menu');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}